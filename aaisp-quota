#!/usr/bin/env bash
set -eu

help () {
	printf '%s [options]\n' "$0"
	printf '\n'
	printf 'Options:\n'
	printf '\t-q: Print the monthly quota\n'
	printf '\t-r: Print the remaining quota allowance\n'
	printf '\t-p: Print the percentage of the monthly quota remaining\n'
	printf '\t-a: Shorthand for -qpr\n'
	printf '\t-h: Format numbers in human-readable format (k/M/G/...)\n'
	printf '\t-i: Format numbers using binary multipliers (ki/Mi/Gi/...)\n'
	printf '\t-u: Omit unit labels (%%, B)\n'
	printf '\n'
	printf "If multiple values are requested, they'll be printed on a\n"
	printf "single line separated by spaces, in the order specified on\n"
	printf "the command line.\n"
}

human_readable=
iec=
percent_unit='%'
byte_unit='B'
outputs=()
while getopts 'ahipqru' opt; do
	case "$opt" in
		a)	outputs+=(q p r);;
		h)	human_readable=YesPlease;;
		i)	iec=YesPlease;;
		p|q|r)	outputs+=("$opt");;
		u)	percent_unit=
			byte_unit=
			;;
		*)	echo 'Unrecognised argument' >&2
			help >&2
			exit 1
			;;
	esac
done

if (( "${#outputs[@]}" == 0 )); then
	echo 'Must specify at least one of -a/-p/-q/-r' >&2
	help >&2
	exit 1
fi

byte_numfmt_args=('--round=down' "--suffix=$byte_unit")
if [[ "$iec" ]]; then  # human_readable is implied
	byte_numfmt_args+=('--to=iec-i')
elif [[ "$human_readable" ]]; then
	byte_numfmt_args+=('--to=si')
fi

declare -a percent_numfmt_args=('--round=down' "--suffix=$percent_unit" "--format=%'.2f")

json="$(curl --no-progress-meter -L https://quota.aa.net.uk --header 'Accept: application/json')"

first=Yes
for output in "${outputs[@]}"; do
	[[ "$first" ]] || printf ' '
	first=
	case "$output" in
		p)	printf "%s" "$(jq '(.quota_remaining / .monthly_quota) * 100' <<<"$json" | numfmt "${percent_numfmt_args[@]}")";;
		q)	printf '%s' "$(jq '.monthly_quota' <<<"$json" | numfmt "${byte_numfmt_args[@]}")";;
		r)	printf '%s' "$(jq '.quota_remaining' <<<"$json" | numfmt "${byte_numfmt_args[@]}")"
	esac
done
printf '\n'
